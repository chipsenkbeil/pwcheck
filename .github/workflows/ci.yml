name: CI

on:
  push:
    paths-ignore:
      - '**.md'
    branches:
      - main
  pull_request:
    paths-ignore:
      - '**.md'
    branches:
      - main

jobs:
  clippy:
    name: "Lint with clippy (${{ matrix.os }})"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { os: windows-latest }
          - { os: ubuntu-latest }
    env:
      RUSTFLAGS: -Dwarnings
    steps:
      - name: Ensure windows git checkout keeps \n line ending
        run: |
          git config --system core.autocrlf false
          git config --system core.eol lf
        if: matrix.os == 'windows-latest'
      - uses: actions/checkout@v3
      - name: Install Rust (clippy)
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy
      - uses: Swatinem/rust-cache@v2
      - name: Check Cargo availability
        run: cargo --version
      - name: Clippy check
        run: cargo clippy --verbose --all-features
  rustfmt:
    name: "Verify code formatting (${{ matrix.os }})"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { os: windows-latest }
          - { os: ubuntu-latest }
    steps:
      - name: Ensure windows git checkout keeps \n line ending
        run: |
          git config --system core.autocrlf false
          git config --system core.eol lf
        if: matrix.os == 'windows-latest'
      - uses: actions/checkout@v3
      - name: Install Rust (rustfmt)
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt
      - name: Install PAM devel (Linux)
        run: apt install -y libpam0g-dev
        if: matrix.os == 'ubuntu-latest'
      - uses: Swatinem/rust-cache@v2
      - name: Check Cargo availability
        run: cargo --version
      - run: cargo fmt --all -- --check
  tests:
    name: "Test Rust ${{ matrix.rust }} on ${{ matrix.os }} ${{ matrix.target }}"
    runs-on: ${{ matrix.os }}
    env:
      RUSTFLAGS: --cfg ci
      RUST_LOG: trace
    strategy:
      fail-fast: false
      matrix:
        include:
          - { rust: stable, os: windows-latest }
          - { rust: stable, os: macos-latest }
          - { rust: stable, os: ubuntu-latest }
          - { rust: stable, os: ubuntu-latest, target: x86_64-unknown-linux-musl }
          - { rust: 1.64.0, os: ubuntu-latest }
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
      - name: Install PAM devel (Linux)
        run: apt install -y libpam0g-dev
        if: matrix.os == 'ubuntu-latest'
      - name: Generate randoms
        uses: joellefkowitz/random-env@v1.0.0
        with:
          names: |
            RANDOM_VALUE
      - name: Set test username & password
        shell: bash
        run: |
          echo "PWCHECK_TEST_USERNAME=testuser" >> "$GITHUB_ENV"
          echo "PWCHECK_TEST_PASSWORD=testpass_${{ env.RANDOM_VALUE }}" >> "$GITHUB_ENV"
      - name: Create a test account (Linux)
        run: |
          sudo useradd -m ${{ env.PWCHECK_TEST_USERNAME }}
          echo "${{ env.PWCHECK_TEST_USERNAME }}:${{ env.PWCHECK_TEST_PASSWORD }}" | sudo chpasswd
        if: matrix.os == 'ubuntu-latest'
      - name: Create a test account (MacOS)
        run: |
          sudo sysadminctl -addUser "${{ env.PWCHECK_TEST_USERNAME }}" -password "${{ env.PWCHECK_TEST_PASSWORD }}"
        if: matrix.os == 'macos-latest'
      - name: Create a test account (Windows)
        run: |
          net user /Y /add "${{ env.PWCHECK_TEST_USERNAME }}" "${{ env.PWCHECK_TEST_PASSWORD }}"
        if: matrix.os == 'windows-latest'
      - name: Run tests
        run: cargo test --release --all-features
